runApp()
library(shiny)
runApp()
runApp()
library(shinyapp)
library(shinyapps)
deployApp()
shinyapps::setAccountInfo(name="efajardo", token="B8D502C7E110CA2F46C52FE85AAB00DA", secret="tYjq7NM+Nsbw6EE9D1z/6KQJwXVEJ6VKgz7PYuTn")
deployApp()
deployApp()
runApp()
library('shiny')
library('shinyapps')
deployApp()
require("shiny")
require("shinyapps")
deployApp()
runApp()
shinyapps::setAccountInfo(name="efajardo", token="B8D502C7E110CA2F46C52FE85AAB00DA", secret="tYjq7NM+Nsbw6EE9D1z/6KQJwXVEJ6VKgz7PYuTn")
deployApp()
deployApp()
shinyapps::setAccountInfo(name="efajardo", token="B8D502C7E110CA2F46C52FE85AAB00DA", secret="tYjq7NM+Nsbw6EE9D1z/6KQJwXVEJ6VKgz7PYuTn")
deployApp()
require("shiny")
require("shinyapps")
deployApp(account=efajardo)
deployApp(account="efajardo")
deployApp(account="efajardo",appName="dataScience")
library(shiny)
runApp()
load(file="logitAnalysisSample.RData")
str(FRlogit)
runApp()
runApp()
runApp()
FRlogit$data
head(FRlogit$data)
FRlogit$data$SEX
runApp()
SRlogit$data$RACE[1]
SRlogit$data$SEX[1]
runApp()
runApp()
newInput <- data.frame(RACE = "Asian", SEX = "Male", AGE = 1,
WEAPON = 0, PCT = "1",
HOUR = 0)
predict(FRlogit, newdata = newInput, type = "response")
newInput <- data.frame(RACE = "Asian", SEX = "Male", AGE = 1,
WEAPON = as.factor(0), PCT = "1",
HOUR = 0)
predict(FRlogit, newdata = newInput, type = "response")
newInput <- data.frame(RACE = "Asian", SEX = "Male", AGE = 1,
WEAPON = as.factor(0), PCT = " 1",
HOUR = 0)
predict(FRlogit, newdata = newInput, type = "response")
newInput <- data.frame(RACE = "Asian", SEX = "Male", AGE = 1,
WEAPON = as.factor(0), PCT = as.factor(" 1"),
HOUR = 0)
predict(FRlogit, newdata = newInput, type = "response")
FRlogit$data$PCT[1]
levels(FRlogit$data$PCT[1])
newInput <- data.frame(RACE = "Asian", SEX = "Male", AGE = 1,
WEAPON = as.factor(0), PCT = "1   ",
HOUR = 0)
predict(FRlogit, newdata = newInput, type = "response")
levels(FRlogit$data$SEX[1])
levels(FRlogit$data$SEX)
levels(FRlogit$data$SEX)
FRlogit$data$SEX
predict(FRlogit, newdata = newInput, type = "response")
head(dataSample)
class(dataSample$SEX)
predict(FRlogit, newdata = newInput, type = "response")
newInput <- data.frame(RACE = "Asian", SEX = as.character("Male"), AGE = 1,
WEAPON = as.factor(0), PCT = "1   ",
HOUR = 0)
newInput
predict(FRlogit, newdata = newInput, type = "response")
View(dataSample)
View(dataSample)
attach(dataSample)
class(RACE)
FRlogit <- glm(FRISKED ~ RACE + SEX + AGE + WEAPON +
PCT + HOUR, family = binomial(logit),
data = dataSample)
newInput
predict(FRlogit, newdata = newInput, type = "response")
SRlogit <- glm(SEARCHED ~ RACE + SEX + AGE + WEAPON +
PCT + HOUR, family = binomial(logit),
data = dataSample)
predict(SRlogit, newdata = newInput, type = "response")
detach(dataSample)
rm(newInput)
rm(attributes)
rm(SymmetricDifference)
save.image("~/Dropbox/2013-2/IntroDataScience/CourseProject/Web/logitAnalysisSample.RData")
runApp()
runApp()
library(appshiny)
library("shinyapps", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
deployApp()
predict
predict.glm
shinyapps::configureApp("dataScience", size="xlarge")
shinyapps::configureApp("dataScience", size="large")
deployApp()
rm(dataSample)
FRlogit$coefficients
save.image("~/Dropbox/2013-2/IntroDataScience/CourseProject/Web/logitAnalysisSample2.RData")
predict(SRlogit$model, newdata = newInput, type = "response")
predict.glm
inherits(FRlogit, "survreg")
predict.glm(SRlogit$model, newdata = newInput, type = "response")
predict.glm(SRlogit, newdata = newInput, type = "response")
runApp()
newInput <- data.frame(RACE = "Asian", SEX = "Male", AGE = 15,
WEAPON = 0, PCT = " 1",
HOUR = 0)
predict.glm(SRlogit, newdata = newInput, type = "response")
newInput <- data.frame(RACE = "Asian", SEX = "Male", AGE = 15,
WEAPON = "0", PCT = " 1",
HOUR = 0)
predict.glm(SRlogit, newdata = newInput, type = "response")
newInput <- data.frame(RACE = "Asian", SEX = "Male", AGE = 15,
WEAPON = "0", PCT = "1   ",
HOUR = 0)
predict.glm(SRlogit, newdata = newInput, type = "response")
runApp()
predict.glm
FRlogit$na.action
!FALSE
predict.glm(SRlogit, newdata = newInput, type = "response")
predict.lm(SRlogit, newdata=newInput, type="response")
predict.lm(SRlogit, newdata=newInput, type="response", scale=1, term=NULL
)
